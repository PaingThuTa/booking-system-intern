generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  role      Role      @default(INTERN)
  bookings  Booking[]
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime  @default(now())
}

model TimeBlock {
  id        String      @id @default(cuid())
  startAt   DateTime
  endAt     DateTime
  capacity  Int         @default(1)
  status    BlockStatus @default(ACTIVE)
  bookings  Booking[]
  createdAt DateTime    @default(now())

  @@index([startAt])
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  timeBlockId String
  status      BookingStatus @default(CONFIRMED)
  createdAt   DateTime      @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeBlock TimeBlock @relation(fields: [timeBlockId], references: [id], onDelete: Cascade)

  @@unique([userId, timeBlockId])
  @@index([timeBlockId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  INTERN
}

enum BlockStatus {
  ACTIVE
  INACTIVE
}

enum BookingStatus {
  CONFIRMED
  CANCELED
}
